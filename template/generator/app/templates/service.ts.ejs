<%if (needDB) {%>import { db<%= canonicalName %>Mixin, events<%= canonicalName %>Mixin } from '../mixins';<%}%>
import {
  <%= canonicalName %>CreateParams,
  <%= canonicalName %>DeleteParams,
  <%= canonicalName %>GetParams,
  <%= canonicalName %>ServiceOptions,
  <%= canonicalName %>ServiceSettingsOptions,
  <%= canonicalName %>UpdateParams,
  getActionConfig,
  I<%= canonicalName %>,
  listActionConfig,
  MoleculerDBService,
  RestOptions,
  UserAuthMeta,
  UserRole,
  <%= canonicalLower %>ErrorCode,
  <%= canonicalLower %>ErrorMessage
} from '../types';
import moleculer, { ActionParams, Context } from 'moleculer';
import { constants } from 'http2';
import { Delete, Get, Post, Put, Service } from '@d0whc3r/moleculer-decorators';
<%if (needDB) {%>import { DbContextParameters } from 'moleculer-db';
import { JsonConvert } from 'json2typescript';
import { <%= canonicalName %>Entity } from '../entities';<%}%>

const validate<%= canonicalName %>Base: ActionParams = {
};

const validate<%= canonicalName %>BaseOptional: ActionParams = {
};

@Service<<%= canonicalName %>ServiceOptions>({
  name: '<%= canonicalLower %>',
<%if (needDB) {%>  mixins: [db<%= canonicalName %>Mixin, events<%= canonicalName %>Mixin],<%}%>
  settings: {
    rest: '/<%= canonicalLower %>',
    fields: ['_id'],<%if (needDB) {%>
    idField: '_id',
    pageSize: 10,
    entityValidator: {
    }
<%}%>  }
})
export default class <%= canonicalName %>Service extends MoleculerDBService<<%= canonicalName %>ServiceSettingsOptions, I<%= canonicalName %>> {
  @Post<RestOptions>('/', {
    name: 'create',
    roles: UserRole.SUPERADMIN,
    params: { ...validate<%= canonicalName %>Base }
  })
  async create<%= canonicalName %>(ctx: Context<<%= canonicalName %>CreateParams, UserAuthMeta>) {
    const entity = this.sanitizeParams(ctx, ctx.params);;
<%if (needDB) {%>    const parsedEntity = new JsonConvert().deserializeObject(entity, <%= canonicalName %>Entity).getMongoEntity();
    return this._create(ctx, parsedEntity);<%} else {%>    return this._create(ctx, entity);<%}%>
  }

  @Get<RestOptions>('/', {
    name: 'list',
    ...listActionConfig
  })
  async list<%= canonicalName %>s(ctx: Context<<%if (needDB) {%>DbContextParameters<%} else {%>Record<string, unknown><%}%>, UserAuthMeta>) {
    const params = this.sanitizeParams(ctx, ctx.params);
    return this._list(ctx, params);
  }

  @Get<RestOptions>('/:id', {
    name: 'get',
    ...getActionConfig
  })
  async get<%= canonicalName %>(ctx: Context<<%= canonicalName %>GetParams, UserAuthMeta>) {
    const params = this.sanitizeParams(ctx, ctx.params);
    return this._get(ctx, params);
  }

  @Put<RestOptions>('/:id', {
    name: 'update',
    roles: UserRole.SUPERADMIN,
    params: {
      ...validate<%= canonicalName %>BaseOptional,
      id: 'string'
    }
  })
  async update<%= canonicalName %>(ctx: Context<<%= canonicalName %>UpdateParams, UserAuthMeta>) {
    const { id } = ctx.params;
    delete ctx.params.id;
    const <%= canonicalLower %> = await this.getById(id);
    if (!<%= canonicalLower %>) {
      throw new moleculer.Errors.MoleculerClientError(<%= canonicalLower %>ErrorMessage.NOT_FOUND, <%= canonicalLower %>ErrorCode.NOT_FOUND);
    }
    const new<%= canonicalName %> = {
      ...<%= canonicalLower %>,
      ...ctx.params,
      _id: id
    };
    return this._update(ctx, new<%= canonicalName %>);
  }

  @Delete<RestOptions>('/:id', {
    name: 'remove',
    roles: UserRole.SUPERADMIN,
    params: { id: 'string' }
  })
  async delete<%= canonicalName %>(ctx: Context<<%= canonicalName %>DeleteParams, UserAuthMeta>) {
    // TODO: Broadcast to delete in all related services
    const params = this.sanitizeParams(ctx, ctx.params);
    await this._remove(ctx, params);
    // eslint-disable-next-line require-atomic-updates
    ctx.meta.$statusCode = constants.HTTP_STATUS_ACCEPTED;
  }
}
